services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: strapi
      POSTGRES_PASSWORD: strapi
      POSTGRES_DB: strapi
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi -d strapi"]
      interval: 5s
      timeout: 3s
      retries: 12

  api:
    build: ./apps/backend
    env_file: ./apps/backend/.env
    environment:
      # Rebuild Strapi admin when files change (so UI updates apply in dev)
      STRAPI_ADMIN_WATCH: "true"
    ports:
      - "1337:1337"
      # Expose Strapi admin Vite dev server for hot reload during `develop`
      - "5173:5173"
    volumes:
      - ./apps/backend:/opt/app
      # Prevent host node_modules (darwin) from shadowing container's (linux)
      - backend_node_modules:/opt/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["npm", "run"]
    command: develop

  web:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        # These are used at build time and baked into the JS bundle
        # Point both API and assets to the proxy to avoid CORS in dev
        VITE_API_BASE: http://localhost:4000
        VITE_STRAPI_URL: http://localhost:4000
    env_file: ./apps/frontend/.env.local
    ports:
      - "3000:3000"
    # For static serve, avoid mounting source; it can overwrite the built dist
    depends_on:
      - api
      - proxy

  proxy:
    build: ./apps/proxy
    env_file: ./apps/backend/.env
    environment:
      # Points to Strapi service in the compose network
      STRAPI_URL: http://api:1337
      # STRAPI_API_TOKEN is loaded from env_file
    ports:
      - "4000:4000"
    depends_on:
      - api

volumes:
  postgres_data:
  backend_node_modules:

